{
	"info": {
		"_postman_id": "992b798b-6da7-4d7c-a9fe-02a2f1704469",
		"name": "Trello API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7212228",
		"_collection_link": "https://cv6rnp.postman.co/workspace/Udemy~71f0a6db-32cf-4bf8-9fb5-07da3e34d1c8/collection/7212228-992b798b-6da7-4d7c-a9fe-02a2f1704469?action=share&source=collection_link&creator=7212228"
	},
	"item": [
		{
			"name": "Get all boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test('Verify the existence and non-empty values of selected properties', () => {",
							"    const res = response[0];",
							"",
							"    pm.expect(res).to.have.property('id').and.to.not.be.empty;",
							"    pm.expect(res).to.have.property('nodeId').and.to.not.be.empty;",
							"    pm.expect(res).to.have.property('name').and.to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/members/me/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"pm.environment.set('boardId', response.id);",
							"",
							"pm.test('Verify the format of selected fields', () => {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody.id).to.be.a('string');",
							"    pm.expect(responseBody.name).to.be.a('string');",
							"    pm.expect(responseBody.desc).to.be.a('string');",
							"    pm.expect(responseBody.descData).to.be.null;",
							"    pm.expect(responseBody.closed).to.be.false;",
							"    pm.expect(responseBody.idOrganization).to.be.a('string');",
							"    pm.expect(responseBody.idEnterprise).to.be.null;",
							"    pm.expect(responseBody.pinned).to.be.false;",
							"    pm.expect(responseBody.url).to.be.a('string');",
							"    pm.expect(responseBody.shortUrl).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/board/?name=Learning Postman&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"board",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "Learning Postman"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test('Verify format of selected fields', () => {",
							"   ",
							"    pm.expect(response.id).to.be.a('string');",
							"    pm.expect(response.name).to.be.a('string');",
							"    pm.expect(response.desc).to.be.a('string');",
							"    pm.expect(response.closed).to.be.a('boolean');",
							"    pm.expect(response.idOrganization).to.be.a('string');",
							"    pm.expect(response.idEnterprise).to.be.null;",
							"    pm.expect(response.pinned).to.be.a('boolean');",
							"    pm.expect(response.url).to.be.a('string');",
							"    pm.expect(response.shortUrl).to.be.a('string');",
							"});",
							"",
							"pm.test('Verify board ID', () => {",
							"    pm.expect(response.id).is.eql(pm.environment.get('boardId'));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"pm.environment.set('todoListId', response.id);",
							"",
							"pm.test('Verify the format of the selected response data', () => {",
							"    const response = pm.response.json();",
							"    pm.expect(response.id).to.be.a('string');",
							"    pm.expect(response.name).to.be.a('string');",
							"    pm.expect(response.closed).to.be.a('boolean');",
							"    pm.expect(response.color).to.be.null;",
							"    pm.expect(response.idBoard).to.be.a('string');",
							"    pm.expect(response.pos).to.be.a('number');",
							"    pm.expect(response.type).to.be.null;",
							"    pm.expect(response.datasource).to.be.an('object');",
							"});",
							"",
							"pm.test('Verify \"id\" property exists in the response', () => {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('id');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?name=TODO&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"pm.environment.set('doneListId', response.id);",
							"// Verify the format of the selected fields in the response",
							"pm.test('Verify the format of selected fields', () => {",
							"    const response = pm.response.json();",
							"    pm.expect(response.id).to.be.a('string');",
							"    pm.expect(response.name).to.be.a('string');",
							"    pm.expect(response.closed).to.be.a('boolean');",
							"    pm.expect(response.color).to.be.null;",
							"    pm.expect(response.idBoard).to.be.a('string');",
							"    pm.expect(response.pos).to.be.a('number');",
							"    pm.expect(response.type).to.be.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?name=DONE&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "DONE"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"pm.environment.set('cardId', response.id);",
							"",
							"pm.test('Verify format of attachment properties', () => {",
							"    const attachmentProperties = response.badges;",
							"    pm.expect(attachmentProperties).to.be.an('object');",
							"    pm.expect(attachmentProperties).to.have.property('attachments');",
							"    pm.expect(attachmentProperties).to.have.property('fogbugz');",
							"    pm.expect(attachmentProperties).to.have.property('checkItems');",
							"    pm.expect(attachmentProperties).to.have.property('checkItemsChecked');",
							"    pm.expect(attachmentProperties).to.have.property('checkItemsEarliestDue');",
							"    pm.expect(attachmentProperties).to.have.property('comments');",
							"    pm.expect(attachmentProperties).to.have.property('description');",
							"    pm.expect(attachmentProperties).to.have.property('due');",
							"    pm.expect(attachmentProperties).to.have.property('dueComplete');",
							"    pm.expect(attachmentProperties).to.have.property('lastUpdatedByAi');",
							"    pm.expect(attachmentProperties).to.have.property('start');",
							"    pm.expect(attachmentProperties).to.have.property('externalSource');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards?name=Sign-up for Trello&key={{trelloKey}}&token={{trelloToken}}&idList={{todoListId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "name",
							"value": "Sign-up for Trello"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{todoListId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move card to DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test('Verify card ID', () => {",
							"    pm.expect(response.id).is.eql(pm.environment.get('cardId'));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList={{doneListId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{doneListId}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{cardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.trello.com"
		},
		{
			"key": "trelloKey",
			"value": "53af2e84389d111f09e79cc605164831"
		},
		{
			"key": "trelloToken",
			"value": "ATTAa4e4294867098633c582b8319740bcae1eee8daaeee34dce5416d9c762e3ec5315C0ECB3"
		},
		{
			"key": "boardId",
			"value": "67e27edef730ab0fabc4b50c"
		},
		{
			"key": "todoListId",
			"value": "67e27edfc79dbdaf030a435f"
		},
		{
			"key": "doneListId",
			"value": "67e27edfd6d4fa1c70346b99"
		},
		{
			"key": "cardId",
			"value": "67e27ee01902c27ed76c54af"
		}
	]
}